(function($) {
	var xhrPool = [];
	$(document).ajaxSend(function(e, jqXHR, options) {
		if (xhrPool.length > 0) {
			lastrequest = xhrPool.pop();
			lastrequest.abort();
		}
		xhrPool.push(jqXHR);
	});
	$(document).ajaxComplete(function(e, jqXHR, options) {
		xhrPool = $.grep(xhrPool, function(x) {
			return x != jqXHR
		});
	});
	var abortall = function() {
			$.each(xhrPool, function(idx, jqXHR) {
				jqXHR.abort();
			});
		};
	var oldbeforeunload = window.onbeforeunload;
	window.onbeforeunload = function() {
		var r = oldbeforeunload ? oldbeforeunload() : undefined;
		if (r == undefined) {
			abortall();
		}
		return r;
	}
})(jQuery);


(function($) {
	var methods = {
		init: function(options) {
			var defaults = {
				source: null,
			};
			var settings = $.extend(defaults, options);
			var obj = $(this);
			var related_form = $('#' + obj.attr('id') + '_form');
			if ($(related_form).length != 0 && settings.params == null) {
				$(":input", $(related_form)).bind('keyup change', function() {
					trigger_tabledata_request(settings, obj);
				});
			}
			trigger_tabledata_request(settings, obj);
		}
	}

	function trigger_tabledata_request(settings, obj) {
		var dk_data = settings.dk_data.split(",");
		var dk_options = settings.dk_options;
		var output_elements = settings.output.split(",");
		var related_form = $('#' + obj.attr('id') + '_form');
		var params = settings.data;
		if ($(related_form).length != 0 && settings.params == null) {
			params = serialize_JSON(related_form);
		}
		tabledata_request = $.getJSON(settings.source, params, function(data) {
			$('tbody', obj).html('');
			$.each(data, function(i, item) {
				var tr_data = document.createElement('tr');
				var tr_data_dk_data = "";
				var tr_data_dk_options = "";
				var item_name = "";
				$.each(output_elements, function(key, value) {
					var td_data = document.createElement('td');
					$(td_data).html(item[value]);
					$(tr_data).append(td_data);
				});
				$.each(dk_data, function(key, value) {
					tr_data_dk_data += "'" + escape_quotes(value) + "' : '" + escape_quotes(item[value]) + "',";
				});
				if (tr_data_dk_data != "") $(tr_data).attr('dk_data', '{' + tr_data_dk_data.slice(0, -1) + '}');
				$.each(dk_options, function(key, value) {
					if (value.condition != null) {
						var enabled = eval("(" + value.condition + ") ? " + value.standard + " : " + "(" + value.standard + " == 1) ? 0 : 1 ");
						tr_data_dk_options += "'" + key + "' : '" + enabled + "',";
					} else {
						tr_data_dk_options += "'" + key + "' : '" + value.standard + "',";
					}
				});
				if (tr_data_dk_options != "") $(tr_data).attr('dk_options', '{' + tr_data_dk_options.slice(0, -1) + '}');
				$('tbody', obj).append(tr_data);
			});
			obj.trigger("update");
			obj.trigger("applyWidgets");
		});
	}

	function serialize_JSON(obj) {
		var json = {};
		jQuery.map($(obj).serializeArray(), function(n, i) {
			json[n['name']] = n['value'];
		});
		return json;
	};
	function is_number(value) {
		return !isNaN(parseFloat(value)) && isFinite(value);
	}

	function escape_quotes(input_string) {
		if (input_string == null) return null;
		if (is_number(input_string)) return input_string;
		return input_string.replace(/"/g, '\\"').replace(/'/g, "\\'");
	}
	$.fn.tabledata = function(method) {
		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return methods.init.apply(this, arguments);
		} else {
			$.error('Method ' + method + ' does not exist in tablemenu plugin.');
		}
	};
})(jQuery);